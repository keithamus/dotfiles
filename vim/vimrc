call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdcommenter'
Plug 'vim-syntastic/syntastic'
Plug 'tpope/vim-surround'
Plug 'kien/ctrlp.vim'
Plug 'bling/vim-airline'
Plug 'airblade/vim-gitgutter'
Plug 'easymotion/vim-easymotion'
Plug 'ervandew/supertab'
Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'
Plug 'mattn/emmet-vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'terryma/vim-multiple-cursors'
Plug 'sickill/vim-monokai'
Plug 'jelera/vim-javascript-syntax'
Plug 'othree/javascript-libraries-syntax.vim'
call plug#end()

" settings
set term=screen-256color
set hls is ic
set nocp
set mouse=a
set backspace=indent,eol,start
set number
set listchars=tab:▸\ ,eol:¬,space:·
set list
set nowrap
set ts=2 sts=2 sw=2 et
syntax on
colorscheme monokai
filetype plugin indent on

" syntaxes
autocmd BufNewFile,BufRead git-rebase-todo set filetype=gitrebase
autocmd BufNewFile,BufRead gitconfig set filetype=gitconfig
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd BufNewFile,BufReadPost tigrc set filetype=vimrc

" colors
hi NonText ctermfg=238 ctermbg=NONE
hi WhiteSpaceBol ctermfg=238 ctermbg=NONE
hi WhiteSpaceMol ctermfg=237 ctermbg=NONE
match WhiteSpaceMol / /
2match WhiteSpaceBol /^ \+/

" bindings
map <M-s> :w<kEnter>  "Works in normal mode, must press Esc first"
imap <M-s> <Esc>:w<kEnter>i "Works in insert mode, saves and puts back in insert mode"

" markdown settings
let g:markdown_fenced_languages = ['ruby', 'sh', 'yaml', 'javascript', 'html', 'css']
let g:markdown_syntax_conceal = 0

" ctrlp settings
let g:ctrlp_user_command = ['.git', 'cd %s; git ls-files -co --exclude-standard']

" vim-indent-guides settings
let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_default_mapping = 0
hi IndentGuidesOdd  ctermfg=242 ctermbg=NONE
hi IndentGuidesEven ctermfg=242 ctermbg=NONE

" syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint', 'flow']
" Point syntastic checker at locally installed binaries if it exists.
if executable('node_modules/.bin/eslint')
  let b:syntastic_javascript_eslint_exec = 'node_modules/.bin/eslint'
endif
if executable('node_modules/.bin/eslint_d')
  let b:syntastic_javascript_eslint_exec = 'node_modules/.bin/eslint_d'
endif
if executable('node_modules/.bin/flow')
  let b:syntastic_javascript_flow_exec = 'node_modules/.bin/flow'
endif

let g:syntastic_json_checkers = ['jsonlint']
if executable('node_modules/.bin/jsonlint')
  let b:syntastic_javascript_flow_exec = 'node_modules/.bin/jsonlinst'
endif

let g:syntastic_python_checkers = ['flake8']
let g:syntastic_sh_checkers = ['shellcheck']
