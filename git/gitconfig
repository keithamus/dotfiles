[core]
  pager = delta
  whitespace = trailing-space,space-before-tab,indent-with-non-tab,tabwidth=4
  compression = 0
  loosecompression = 0
  preloadindex = 1
  ignorecase = false
  autoclrf = true
  autocrlf = input

[interactive]
  diffFilter = delta --color-only

[init]
  defaultBranch = main

[delta]
  side-by-side = true
  syntax-theme = GitHub

[alias]

  ##################
  #### Fetching ####
  ##################

  # Fetch everything down, and delete anything that has been deleted remotely, or local branches that got merged to master
  fetch-and-cleanup = "!git fetch --all --prune && git delete-merged-branches"

  # Fetch, cleanup and and _checkout_ origin/master
  fetch-and-cleanup-and-checkout-master = "!f() { git f && git checkout ${1:-origin}/${2:-master} -f; }; f"

  # ~~Shorthands
  f = !git fetch-and-cleanup
  fcm = !git fetch-and-cleanup-and-checkout-master

  ##################
  #### Statuses ####
  ##################

  # Outputs how many commits ahead from upstream we are
  how-many-ahead = "!git rev-list '@{u}..' 2>/dev/null | wc -l | xargs"

  # Outputs the current rev as branch, tag, or commit
  current-rev = rev-parse --abbrev-ref HEAD

  # Outputs the current upstream, or if not available, `{unpushed}`
  current-upstream = "!git rev-parse --abbrev-ref '@{u}' 2>/dev/null || echo '{unpushed}'"

  # Summarise satus info as a headline
  status-headline = "!git log --color --pretty=format:\"%Cgreen`git current-rev`%Creset..%Cred`git current-upstream`%Creset [`git how-many-ahead`] `git workstateicon`%n%Creset(%C(yellow)%h%Creset %s <%C(cyan)%an%Creset>)\n\" | head -2"

  # ~~Shorthands
  s = "!cd ${GIT_PREFIX:-`pwd`}; git status-headline; git status -s"
  st = !git s

  ###############
  #### Diffs ####
  ###############

  # ~~Shorthands
  d = diff --word-diff
  di = !git d
  ds = !git d --staged

  ##################
  #### Branches ####
  ##################

  # Delete branches that have been merged into master already
  delete-merged-branches = "!f() { git branch --merged origin/master | tail -n +2 | xargs git branch -d; }; f"

  # Set up every remote branch as a local tracking copy
  track-all-branches = "!f() { for remote in `git branch -r `; do git branch --track $remote; done; }; f"

  # Friendlier version of `git checkout -b`
  branch-wizard = "!f() { read -p 'Name this branch: ' name && [ -n \"$name\" ] && git checkout -b $name HEAD; }; f"

  # ~~Shorthands
  b = branch 
  br = !git b
  lbr = !git b --all

  ######################
  #### Rebase/Merge ####
  ######################

  # Determine if we're `rebase`ing, `merge`ing or `normal`
  workstate = "!f() { (test -d \"${1}/rebase-merge\" -o -d \"${1}/rebase-apply\" && echo rebase) || (test -e \"${1}/MERGE_HEAD\" && echo merge) || echo normal; }; f \"$(git rev-parse --git-dir)\""
  workstateicon = "!f() { (test -d \"${1}/rebase-merge\" -o -d \"${1}/rebase-apply\" && printf '\\xee\\x9c\\xa8') || (test -e \"${1}/MERGE_HEAD\" && printf '\\xef\\x90\\x99'); }; f \"$(git rev-parse --git-dir)\""

  # `continue` is an alias for `rebase --continue` or `merge --continue`
  continue = !git "$(git workstate)-continue"
  cont = !git continue

  # Abort is shorthand for `merge --abort` or `rebase --abort`
  abort = !sh -c "git merge --abort 2>/dev/null || git rebase --abort 2>/dev/null"
  ab = !git abort

  # `This is a hack for when in normal mode, typing `git continue` should echo this message
  normal-continue = !echo "You are not rebasing or merging any files"

  # If all merge conflicts are resolved then just `git commit`
  merge-continue = "!f() { (test $count -ne 0 && echo \"There are still merge conflicts! Cannot continue\" && exit 1) || git commit; }; f \"$(git ls-files --unmerged | wc -l)\""

  # If all conflicts are resolved does `rebase --continue` (or `rebase --skip` if no files changed)
  rebase-continue = "!f() { git diff-index --quiet HEAD --; (test $? -eq 0 && echo \"No changes, automatically skipping commit\" && git rebase --skip) || git rebase --continue; }; f"

  # Fetch a branch (default master), then rebase it
  fetch-rebase = "!f() { git fetch ${1:-origin} ${2-master} && git rebase ${1:-origin}/${2:-master}; }; f"

  # Fetch a branch (default master), then _interactively_ rebase it
  fetch-interactive-rebase = "!f() { git fetch ${1:-origin} ${2-master} && git rebase --interactive ${1:-origin}/${2:-master}; }; f"

  fetch-interactive-rebase = "!f() { git fetch ${1:-origin} ${2-master} && git rebase --interactive ${1:-origin}/${2:-master}; }; f"

  # ~~Shorthands
  rem = !git fetch-rebase
  reb = !git fetch-rebase
  rim = !git fetch-interactive-rebase
  rib = !git fetch-interactive-rebase

  #########################
  #### GitHub specific ####
  #########################

  # View the current commit in github
  github-view-commit = "!f() { open https://$(git remote -v | grep -Eo 'github.com[:/][^.]+' | head -1 | tr : /)/commit/$(git rev-parse ${1-HEAD}); }; f"

  # View the current branch in github
  github-view-branch = "!f() { open https://$(git remote -v | grep -Eo 'github.com[:/][^.]+' | head -1 | tr : /)/tree/${1-HEAD}%(branch); }; f"

  # View the github page for the current project
  github-view-project = "!open https://$(git remote -v | grep -Eo 'github.com[:/][^.]+' | head -1 | tr : /)"

  # Go to the github issues page for this current project
  github-view-issues = "!open https://$(git remote -v | grep -Eo 'github.com[:/][^.]+' | head -1 | tr : /)/issues"

  # Go to the github pulls page for this current project
  github-view-pulls = "!open https://$(git remote -v | grep -Eo 'github.com[:/][^.]+' | head -1 | tr : /)/pulls"

  # ~~Shorthands
  ghc = !git github-view-commit
  ghb = !git github-view-branch
  ghh = !git github-view-project
  ghi = !git github-view-issues
  ghp = !git github-view-pulls

  ####################
  #### Committing ####
  ####################

  # Search for a user by name in the log - and output a GitHub `Co-authored-by` string for that user
  get-coauthor = "!f() { author=$(git log --no-merges -1 --author \"${1}\" --format='%an <%ae>' 2>/dev/null); test -z \"$author\" && exit 1; echo \"Co-authored-by: $author\"; }; f"

  # Ammend a commit to add a trailer for `Co-authored-by`
  coauthor = "!f() { $co = $(git get-coauthor \"${1}\"); echo; read -n1 -p $co y; [[ \"$y\" == 'y' ]] && git commit --amend -m\"$(git log --format=%B -n1)\" -m\"$co\"; }; f"

  # Commit ammend no edit
  commit-ammend-no-edit = "!git s; git show | cat; echo; read -n1 -p 'Amend this commit? ' y; echo; [[ \"$y\" == 'y' ]] && git commit --amend --no-edit"

  # Show the conventional commit table
  conventional-commit-table = !printf '0 \\xe2\\x99\\xbb\\xef\\xb8\\x8f\\xef\\xb8\\x8f chore\n1 \\xE2\\x9C\\xA8 feat\n2 \\xF0\\x9F\\x90\\x9B fix\n3 \\xF0\\x9F\\x93\\x9A docs\n4 \\xf0\\x9f\\x92\\x8e style\n5 \\xf0\\x9f\\x93\\xa6 refactor\n6 \\xf0\\x9f\\x9a\\x80 perf\n7 \\xf0\\x9f\\x9a\\xa8 test\n8 \\xf0\\x9f\\x9b\\xa0 build\n9 \\xe2\\x9a\\x99\\xef\\xb8\\x8f ci\n'

  # Start a commit with a conventional commit prefix
  conventional-commit = "!f() { p=(chore feat fix docs style refactor perf test build ci); git conventional-commit-table; read -n1 n; echo git commit -m\"${p[n]}: \" -e $@; }; f"

  # ~~Shorthands
  c = commit
  cc = !git conventional-commit
  cw = !git commit -m'wip! '
  caa = commit --amend
  can = !git commit-ammend-no-edit

  ##############
  #### Push ####
  ##############

  # Automatically set upstream and push to it
  promote = "!f() { local name=\"$(git rev-parse --abbrev-ref HEAD | head)\"; [ -f \".git/refs/heads/$name\" ] && git push --set-upstream ${1:-origin} \"$name\" || (git branch-wizard && git promote \"$1\";); }; f"

  # ~~Shorthands
  p = push
  pf = !git push --force-with-lease

  #############
  #### Hub ####
  #############

  # in case `git` isn't aliased to `hub` - provide aliases for hub commands
  sync = "!f() { hub sync $@; }; f"
  browse = "!f() { hub browse $@; }; f"
  ci-status = "!f() { hub ci-status $@; }; f"
  compare = "!f() { hub compare $@; }; f"
  create = "!f() { hub create $@; }; f"
  fork = "!f() { hub fork $@; }; f"
  issue = "!f() { hub issue $@; }; f"
  pr = "!f() { hub pr $@; }; f"
  pull-request = "!f() { hub pull-request $@; }; f"
  release = "!f() { hub release $@; }; f"

  # ~~Shorthands
  ci = "!f() { hub ci-status $@; }; f"

[commit]
  gpgsign = true
  verbose = 2

[apply]
  ignore-whitespace = 1

[help]
  autocorrect = 1

[diff]
  noprefix = 1
  algorithm = patience
  mnemonicprefix = 1

[push]
  default = current

[rebase]
  stat = 1
  autostash = 1
  autosquash = 1
  missingcommitscheck = warn

[color]
  ui = auto
  pager = no

[branch]
  autosetuprebase = always

[merge]
  ff = only

[branch "master"]
  mergeoptions = --no-ff
  rebase = true
  push = refs/heads/*:refs/heads/*
  push = refs/tags/*:refs/tags/*
  push = resfs/notes/*:refs/notes/*
  fetch = refs/heads/*:refs/heads/*
  fetch = refs/tags/*:refs/tags/*
  fetch = refs/notes/*:refs/notes/*

[branch "develop"]
  mergeoptions = --no-ff
  rebase = true
  push = refs/heads/*:refs/heads/*
  push = refs/tags/*:refs/tags/*
  push = resfs/notes/*:refs/notes/*
  fetch = refs/heads/*:refs/heads/*
  fetch = refs/tags/*:refs/tags/*
  fetch = refs/notes/*:refs/notes/*

[rerere]
  enabled = 1

[url "github.com:"]
  insteadOf = git@github.com/
  insteadOf = http://github.com/
  insteadOf = https://github.com/
  insteadOf = github.com/
  insteadOf = git://github.com/
  insteadOf = git@github.com:
  insteadOf = github.com:
  insteadOf = git://github.com: 
